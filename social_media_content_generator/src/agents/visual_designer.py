from crewai import Agent
from typing import Dict
from langchain_core.language_models.chat_models import BaseChatModel

class VisualDesigner:
    @staticmethod
    def create(llm: BaseChatModel) -> Agent:
        """
        Creates a Visual Designer agent that generates image prompts and visual guidelines.
        
        Args:
            llm (BaseChatModel): The language model to use for the agent
        """
        return Agent(
            role='Visual Designer',
            goal='Create effective image generation prompts and visual guidelines',
            backstory="""You are a visual design expert who knows how to create 
            detailed prompts for AI image generation. You understand composition, 
            style, and visual trends across different social media platforms.""",
            tools=[],  # Will add image-related tools later
            llm=llm,
            verbose=True
        )

    @staticmethod
    def generate_visual_prompts(content: Dict, platform: str) -> dict:
        """
        Generates visual prompts based on the content and platform.
        
        Args:
            content (Dict): Generated content from Content Writer
            platform (str): Target social media platform
            
        Returns:
            dict: Generated visual prompts and guidelines
        """
        visual_specs = {
            "primary_prompt": "",
            "style_guide": {
                "color_palette": [],
                "mood": "",
                "composition": "",
                "lighting": ""
            },
            "platform_specs": {
                "platform": platform,
                "dimensions": "",
                "aspect_ratio": "",
                "resolution": ""
            },
            "variations": [],
            "technical_requirements": {
                "file_format": "",
                "max_file_size": "",
                "color_space": ""
            }
        }
        
        # Platform-specific image dimensions
        platform_dimensions = {
            "instagram": {
                "feed": "1:1 (1080x1080px)",
                "story": "9:16 (1080x1920px)",
                "carousel": "1:1 (1080x1080px)"
            },
            "twitter": {
                "timeline": "16:9 (1200x675px)",
                "card": "1.91:1 (1200x628px)"
            },
            "linkedin": {
                "post": "1.91:1 (1200x628px)",
                "company": "1.91:1 (1200x628px)"
            },
            "facebook": {
                "post": "1.91:1 (1200x628px)",
                "story": "9:16 (1080x1920px)"
            },
            "tiktok": {
                "video": "9:16 (1080x1920px)"
            }
        }
        
        # Set platform-specific dimensions
        if platform.lower() in platform_dimensions:
            specs = platform_dimensions[platform.lower()]
            visual_specs["platform_specs"]["dimensions"] = specs.get("post", specs[list(specs.keys())[0]])
        
        # Visual prompts will be generated by the agent during execution
        return visual_specs 